---
title: "chapter2simu"
format: html
editor: visual
---

## 

## Chapter 2 Simulations

Focus on Simple Random Walks - Simulations and

## 2.3 Computations in R

### Necessary Packages:

```{r}
library(diagram) 
suppressWarnings(library(expm))  
library(markovchain)
```

### Simple Practice:

Random Walk Simulation in Different Dimensions:

```{r}
#specifying parameters
 ntraj<- 4
 p<-0.49
 nsteps<- 80
 #specifying seed
 set.seed(45568223)
 #defining walkas matrix
 walk<- matrix(NA,nrow=nsteps, ncol=ntraj)
 #simulating trajectories
 for(j in 1:ntraj) {
 walk[1,j]<- 0
 for(i in 2:nsteps)
 walk[i,j]<- ifelse(runif(1)<p,walk[i-1,j]+1, walk[i-1,j]-1)
 }
 #plotting trajectories
 matplot(walk, type="l",lty=1, lwd=2,col=2:4,
 ylim=c(range(walk)), xlab="Step",ylab="Position",
 panel.first=grid())
 points(1:nsteps, walk[,1],pch=16, col=2)
 points(1:nsteps, walk[,2],pch=16, col=3)
 points(1:nsteps, walk[,3],pch=16, col=4)
 points(1:nsteps, walk[,4],pch=16, col=5)
 
 #specifying numberof steps
 nsteps<- 10000
 #specifying seed
 set.seed(607335)
 #defining walkas matrix
 walk<- matrix(NA,nrow=nsteps, ncol=2)
 #setting startingpoint
 walk[1,]<- c(0,0)
 #definiting randomsteps
 rstep<- matrix(c(1,0,-1,0,0, 1,0,-1),nrow=4, ncol=2,
 byrow=TRUE)
 #simulating trajectories
 for(i in 2:nsteps)
 walk[i,]<- walk[i-1,]+ rstep[sample(1:4,size=1),]
 #plotting trajectories
 plot(x=walk[,1], y=walk[,2],type="l", col="blue",
 xlim=range(walk[,1]), ylim=range(walk[,2]),xlab="x",
 ylab="y", panel.first=grid())
 #adding startingpoint
 points(cbind(walk[1,1], walk[1,2]),pch=16, col="green",cex=2)
 #adding endingpoint
 points(cbind(walk[nsteps,1],walk[nsteps,2]), pch=16,col="red",
 cex=2)
 
 #specifying numberof steps
 nsteps<- 5000
 #specifying seed
 set.seed(830126)
 #defining walkas matrix
 walk<- matrix(NA,nrow=nsteps, ncol=3)
 #setting startingpoint
 walk[1,]<- c(0,0,0)
 #defining randomsteps
 rstep<- matrix(c(1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1),
 nrow=6, ncol=3,byrow=TRUE)
 #simulating trajectories
 for(i in 2:nsteps)
 walk[i,]<- walk[i-1,]+rstep[sample(1:6,size=1),]
 #plotting trajectories
 library(plot3D)
 lines3D(walk[,1], walk[,2],walk[,3], col="blue",
 xlim=range(walk[,1]), ylim=range(walk[,2]),
 zlim=range(walk[,3]), xlab="x",ylab="y", zlab="z",bty="b2",
 ticktype="detailed")
 #adding startingpoint
 points3D(x=walk[1,1], y=walk[1,2],z=walk[1,3], add=TRUE,
 pch=16, col="green",cex=2)
 #adding endingpoint
 points3D(walk[nsteps,1], walk[nsteps,2],walk[nsteps,3],
 add=TRUE, pch=16,col="red", cex=2)
```

Gambler's Ruin:

```{r}
#specifying parameters
 p<-0.48
 i<-10
 N<-20
 ntraj<- 100000
 #defining walkas vector
 walk<- c()
 #setting counters
 nNs<- 0
 nzeros<- 0
 ngames<- 0
 #setting seednumber
 set.seed(30112443)
 #simulating trajectoriesuntil hittingN or0
 for(j in 1:ntraj) {
 walk[1]<- i
 k<-2
 
 repeat {
   
 walk[k]<- ifelse(runif(1)<p,walk[k-1]+1, walk[k-1]-1)
 ngames<- ngames+ 1
 
 if(walk[k]==N){
 nNs<-nNs+1
 break
 }
 
 else if(walk[k]==0){
 nzeros <- nzeros+1
 break
 }
 
 k <- k+1
 
 }
 }
 print(prob.Ns<- nNs/ntraj)
 print(prob.zeros <-nzeros/ntraj)
  print(mean.ngames<- ngames/ntraj)
  
   p<- seq(0.35,0.65,0.001)
 i<- 10
 N<- 20
 q<- 1-p
 p.ruin<- ifelse(p==0.5,(N-i)/N,((q/p)^i-(q/p)^N)/(1-(q/p)^N))
 #ploting the graphs
 plot(p, p.ruin, type = "l", lwd=2, col = "red", xlab="p",
 ylab="Probability", panel.first = grid())
 lines(p, 1-p.ruin, lwd=2, col = "green")
 legend("right", c("Probability of $0", "Probability of $N"),
 lty=1, col=2:3)
```

Random Walk on Graph

```{r}
 #specifying transition probability matrix
 tm<- matrix(c(1,0,0,0,0,0,1/4,0,1/4,1/4,0,1/4,0,1/2,0,
 1/2,0,0,0,1/4,1/4,0,1/4,1/4,1/3,0,0,1/3,0,1/3,0,1/3,0,1/3,1/3,0),
 nrow=6, ncol=6, byrow=TRUE)
 #setting counter
 nsec<- 0
 #estimating expected number of seconds
 p<- matrix(NA, nrow=172, ncol=6)
 p[1,]<- c(0, 0, 0, 1, 0, 0)
 for (i in 2:172) {
 p[i,]<- p[i-1,]%*%tm
 nsec<- nsec+(i-1)*(p[i,1]-p[i-1,1])
 }
 print(nsec)
```

## Exercises for Chapter 2

### Exercise 2.1

Trajectory Simulation:

```{r}
#specifying parameters
 ntraj<- 10000
 p<-0.3

 
 #specifying numberof steps
 nsteps<- 50
 #specifying seed
 set.seed(607335)
 #defining walkas matrix
 walk<- matrix(NA,nrow=nsteps, ncol=ntraj)
 #setting startingpoint
 walk[1,]<- c(0,0)
 #definiting randomsteps
for(j in 1:ntraj) {
 walk[1,j]<- 0
 for(i in 2:nsteps)
 walk[i,j]<- ifelse(runif(1)<p,walk[i-1,j]+1, walk[i-1,j]-1)
 }
 #empirical mean and variance
 mean(walk[50,])
 var(walk[50,])
 
 #theoretical values
 mean1 <- (2*p-1)*nsteps
 cat("Theoretical Estimate ", mean1, "\n")
 var1 <- 4*p*(1-p)*nsteps
 cat("Theoretical Variance ", var1)
```

In 50 steps, with p=0.3 to move forward, the mean/variance of the random walk w/ 10k trajectories is to on average go -19.6078 steps with 41.28 variance. These are very similar to the theoretical answers.

### Exercise 2.3

A/B) Origin Return Count, Average Step Count of Successful Returns

```{r}
#setup
d1origin <- 0
step1 <- 0
d2origin <- 0
step2 <- 0
d3origin <- 0
step3 <- 0
d4origin <- 0
step4 <- 0

#specifying parameters
 ntraj<- 10000
 p<-0.5
 nsteps<- 1000
 #specifying seed
 set.seed(45568223)
 
 
 #defining walkas matrix
 walk<- matrix(NA,nrow=nsteps, ncol=ntraj)
 #simulating trajectories
for (j in 1:ntraj) {
  walk[1, j] <- 0
  for (i in 2:nsteps) {
    walk[i, j] <- ifelse(runif(1) < p, walk[i - 1, j] + 1, walk[i - 1, j] - 1)
    
    if (walk[i, j] == 0) {
      d1origin <- d1origin + 1
      step1 <- step1 + i
      break
    }
  }
}

# Results
cat("Proportion of 1-D walks that return to origin:", d1origin / ntraj, "\n")
cat("Average step to first return (among returning 1-D walks):", step1 / d1origin, "\n")


walk_x <- matrix(0, nrow = nsteps, ncol = ntraj)
walk_y <- matrix(0, nrow = nsteps, ncol = ntraj)

# Define 2D steps: right, left, up, down
rstep <- matrix(c(1, 0,   # right
                 -1, 0,   # left
                  0, 1,   # up
                  0,-1),  # down
                nrow = 4, byrow = TRUE)

# Simulate trajectories
for (j in 1:ntraj) {
  for (i in 2:nsteps) {
    step <- rstep[sample(1:4, size = 1), ]  # pick a random 2D step
    walk_x[i, j] <- walk_x[i - 1, j] + step[1]
    walk_y[i, j] <- walk_y[i - 1, j] + step[2]

    # Check if the walker returned to origin
    if (walk_x[i, j] == 0 && walk_y[i, j] == 0) {
      d2origin <- d2origin + 1
      step2 <- step2 + i
      break
    }
  }
}
 
# Results
cat("Proportion of 2-D walks that return to origin:", d2origin / ntraj, "\n")
cat("Average step to first return (among returning 2-D walks):", step2 / d2origin, "\n")

walk_x <- matrix(0, nrow = nsteps, ncol = ntraj)
walk_y <- matrix(0, nrow = nsteps, ncol = ntraj)
walk_z <- matrix(0, nrow = nsteps, ncol = ntraj)

#defining randomsteps
 rstep<- matrix(c(1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1),
 nrow=6, ncol=3,byrow=TRUE)

# Simulate trajectories
for (j in 1:ntraj) {
  for (i in 2:nsteps) {
    step <- rstep[sample(1:6, size = 1), ]  # pick a random 2D step
    walk_x[i, j] <- walk_x[i - 1, j] + step[1]
    walk_y[i, j] <- walk_y[i - 1, j] + step[2]
    walk_z[i, j] <- walk_z[i - 1, j] + step[3]

    # Check if the walker returned to origin
    if (walk_x[i, j] == 0 && walk_y[i, j] == 0 && walk_z[i, j] == 0) {
      d3origin <- d3origin + 1
      step3 <- step3 + i
      break
    }
  }
}
 
# Results
cat("Proportion of 3-D walks that return to origin:", d3origin / ntraj, "\n")
cat("Average step to first return (among returning 3-D walks):", step3 / d3origin, "\n")

walk_x <- matrix(0, nrow = nsteps, ncol = ntraj)
walk_y <- matrix(0, nrow = nsteps, ncol = ntraj)
walk_z <- matrix(0, nrow = nsteps, ncol = ntraj)
walk_a <- matrix(0, nrow = nsteps, ncol = ntraj)

#defining randomsteps
 rstep<- matrix(c(1,0,0,0,-1,0,0,0,0,1,0,0,0,-1,0,0,0,0,1,0,0,0,-1,0,0,0,0,1,0,0,0,-1),
 nrow=8, ncol=4,byrow=TRUE)

# Simulate trajectories
for (j in 1:ntraj) {
  for (i in 2:nsteps) {
    step <- rstep[sample(1:8, size = 1), ]  # pick a random 2D step
    walk_x[i, j] <- walk_x[i - 1, j] + step[1]
    walk_y[i, j] <- walk_y[i - 1, j] + step[2]
    walk_z[i, j] <- walk_z[i - 1, j] + step[3]
    walk_a[i, j] <- walk_z[i - 1, j] + step[4]

    # Check if the walker returned to origin
    if (walk_x[i, j] == 0 && walk_y[i, j] == 0 && walk_z[i, j] == 0 && walk_a[i,j] == 0) {
      d4origin <- d4origin + 1
      step4 <- step4 + i
      break
    }
  }
}
 
# Results
cat("Proportion of 4-D walks that return to origin:", d4origin / ntraj, "\n")
cat("Average step to first return (among returning 4-D walks):", step4 / d4origin, "\n")

```

Interesting how rates go down for returning to origin but steps do not. This is mostly likely due to only 1-D and 2-D converging while 3-D and 4-D diverge due to theorems so only quick returns can actually reach the origin.

### Exercise 2.5

```{r}
#specifying parameters
 ntraj<- 100
 p<-0.5
 nsteps<- 1000
 #specifying seed
 set.seed(45568223)
 
 barN <- 50
 barrier <- numeric(barN)
 barSteps <- numeric(barN)


# Define 2D steps: right, left, up, down
rstep <- matrix(c(1, 0,   # right
                 -1, 0,   # left
                  0, 1,   # up
                  0,-1),  # down
                nrow = 4, byrow = TRUE)

# Simulate trajectories
for (k in 1:barN) {
for (j in 1:ntraj) {
  walk_x <- matrix(0, nrow = nsteps, ncol = ntraj)
  walk_y <- matrix(0, nrow = nsteps, ncol = ntraj)
  
  for (i in 2:nsteps) {
    step <- rstep[sample(1:4, size = 1), ]  # pick a random 2D step
    walk_x[i, j] <- walk_x[i - 1, j] + step[1]
    walk_y[i, j] <- walk_y[i - 1, j] + step[2]

    # Check if the walker returned to origin
    if (walk_x[i, j] == k) {
      barrier[k] <- barrier[k] + 1
      barSteps[k] <- barSteps[k] + i
      break
    }
  }
}
}

barrier
barSteps
```

```{r}
plot(1:50, barrier/100, col="blue", xlab="Position of barrier", ylab="Probability of 
hitting barrier", panel.first=grid())

# Compute average steps per success (only if barrier was hit)
avg_steps <- ifelse(barrier > 0, barSteps / barrier, NA)

# Plot number of successes (barrier hits)
plot(1:50, barrier, type = "l", col = "blue", lwd = 2,
     xlab = "Barrier position (x = k)",
     ylab = "Number of successful walks",
     panel.first = grid())

# Add a second y-axis for average steps
par(new = TRUE)
plot(1:50, avg_steps, type = "l", col = "red", lwd = 2,
     axes = FALSE, xlab = "", ylab = "",
     ylim = range(avg_steps, na.rm = TRUE))

axis(side = 4)
mtext("Average steps (per success)", side = 4, line = 3)

# Add a legend
legend("topright",
       legend = c("Success count", "Avg steps (if hit)"),
       col = c("blue", "red"), lty = 1, lwd = 2)



```
