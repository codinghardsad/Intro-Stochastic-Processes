---
title: "chapter1sim"
format: pdf
editor: visual
---

## Chapter 1 Simulations

Focus on Markov Chains and Ergodicity -\> Steady-State Heavy

## 1.6 Computations in R

### Necessary Packages:

```{r}
library(diagram)
suppressWarnings(library(expm)) 
library(markovchain)
```

### Simple Practice:

Transition Matrix and Diagram:

```{r}
# creating transition matrix:
MatTM <- matrix(c(0.4, 0.2, 0.4, 0.7, 0.1, 0.2, 0.2, 0.5, 0.3), nrow=3, ncol=3, byrow=T)

# plotting diagram of transitions:
TrMatTM <- t(MatTM)
plotmat(TrMatTM, pos = c(1,2), arr.col='green', arr.length = 1, arr.pos = 0.6, arr.width = 0.1, box.col='cyan', box.size = 0.1, self.cex = 0.3, self.shifty = 0.1)
```

Initial Vector and N-Step Distribution:

```{r}
#finding 3rd and 4rth step transition probability matrix
print(tm3 <- MatTM %^% 3)

print(tm4 <- MatTM %^% 4)

#Initial Matrix
MatIni <- c(.5, .5, 0)

##uncond prob after 3 steps
MatIni %*% tm3
```

Period, Irreducible, Steady State

```{r}
 #finding periods of irreducible Markov chains
 tm12.ir<- matrix(c(0.3,0.7,1,0), nrow=2, ncol=2, byrow=TRUE)
 mc12.ir<- new("markovchain", transitionMatrix=tm12.ir,
 states=c("1","2"))
 period(mc12.ir)
  recurrentClasses(mc12.ir)
  transientClasses(mc12.ir)
   round(steadyStates(mc12.ir), digits=4)
```

Trying out trajectories

```{r}
mc.name <- new("markovchain", transitionMatrix=MatTM, states=c("1", "2", "3"))
#specifying totalnumber oftrajectories
 ntraj.name<-100
 #specifying totalnumber ofsteps
 nsteps.name<-25
 #specifying initialprobability
 init.prob.name<-c(.5, .5, 0)
 #specifying matrix containing states
 states.matrix.name<- matrix(NA, nrow=nsteps.name, ncol=ntraj.name)
 #specifying seed
 set.seed(1234)
 #generating initial state
 init.state.name<- sample(1:3, 1, prob=init.prob.name)
 #simulating states
 for (i in 1:ntraj.name)
 states.matrix.name[,i]<- rmarkovchain(n=nsteps.name-1, object=mc.name,
 t0=init.state.name, include.t0=TRUE)
  #plotting simulated trajectories
 matplot(states.matrix.name, type="b")
 # Extract the 50th trajectory
v50 <- states.matrix.name[, 50]

# Count occurrences of each state
state_counts <- table(v50)

print(state_counts)

#specifying transitionprobability matrix
 tm<- matrix(c(0.7,0.1, 0.2,0.0, 0.6,0.4, 0.5,0.2,0.3),
 nrow=3, ncol=3,byrow=TRUE)
 #creating Markovchain object
 library(markovchain)
 mc<- new("markovchain",transitionMatrix=tm, states=c("1","2",
 "3"))
 #specifying totalnumber ofsteps
 nsteps<- 25
 #specifying initialprobability
 p0<- c(1/3,1/3, 1/3)
 #specifying matrixcontaining states
 MC.states<- matrix(NA,nrow=nsteps, ncol=2)
 #specifying seed
 set.seed(2443927)
 #simulating trajectories
 for (i in 1:2) {
 state0<- sample(1:3,1, prob=p0)
 MC.states[,i]<- rmarkovchain(n=nsteps-1,object=mc, t0=state0,
 include.t0=TRUE)
 }
 #plotting simulatedtrajectories
 matplot(MC.states, type="l",lty=1, lwd=2,col=3:4,
 xaxt="n", yaxt="n",ylim=c(1,3), xlab="Step",ylab="State",
 panel.first=grid())
 axis(side=1, at=c(1,5,10,15,20,25))
 axis(side=2, at=1:3)
 points(1:nsteps, MC.states[,1],pch=16, col=3)
 points(1:nsteps, MC.states[,2],pch=16, col=4)

 
```

## 1.9 Exercises in R

### Exercise 1.2

A\) Plot

```{r}
# creating transition matrix:
MatTM <- matrix(c(1.0, 0, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.2, 0, 0, 0, 0.8, 0.0, 0.0, 1.0, 0, 0, 0, 0, 0, 1, 0), nrow=5, ncol=5, byrow=T)

# plotting diagram of transitions:
TrMatTM <- t(MatTM)
plotmat(TrMatTM, arr.col='green', arr.length = 0.25, arr.pos = 0.6, arr.width = 0.1, box.col='cyan', box.prop = 0.5, box.size = 0.1, self.cex = 0.3, self.shifty = 0.09, lwd=1, self.shiftx=0.01)
```

B\) Classes, States, and Periods

```{r}
mc1.2<- new("markovchain", transitionMatrix=MatTM,
states=c("1","2","3","4","5"))
print("reccurent classes: ")
recurrentClasses(mc1.2)
print("transient classes: ")
transientClasses(mc1.2)
print("Steady State:")
round(steadyStates(mc1.2), digits=4)
print("absorbing states:")
absorbingStates(mc1.2)
print("Period:")
period(mc1.2)
#Zero because not irreducible because can't go to 2 naturally
```

C\) Simulation

```{r}
#specifying totalnumber ofsteps
 nsteps<- 25
 #specifying initialprobability
 p0<- c(1/5, 1/5, 1/5, 1/5, 1/5)
 #specifying matrixcontaining states
 MC.states<- matrix(NA,nrow=nsteps, ncol=5)
 #specifying seed
set.seed(12345)

 #simulating trajectories
 for (i in 1:3) {
 state0<- state0 <- sample(1:5,1, prob=p0)
 MC.states[,i]<- rmarkovchain(n=nsteps-1,object=mc1.2, t0=state0,
 include.t0=TRUE)
 }
 #plotting simulatedtrajectories
 matplot(MC.states, type="l",lty=1, lwd=2,col=2:4,
 xaxt="n", yaxt="n",ylim=c(1,5), xlab="Step",ylab="State",
 panel.first=grid())
 axis(side=1, at=c(1,5,10,15,20,25))
 axis(side=2, at=1:5)
  points(1:nsteps, MC.states[,1],pch=16, col=2)
 points(1:nsteps, MC.states[,2],pch=16, col=3)
 points(1:nsteps, MC.states[,3],pch=16, col=4)
 
 
```

D\) Steady State and Ergodicity

```{r}
print("Steady State:")
round(steadyStates(mc1.2), digits=4)
# ergodic in application but not in theory
```

E\) Plotting Probability to be at Different States over Steps

```{r}
#specifying total number of steps 
nsteps<- 50
 
#specifying matrix containing probabilities 
probs<- matrix(NA, nrow=nsteps, ncol=5) 
  
#computing probabilities  
probs[1,] <- p0 
for(n in 2:nsteps)  
  probs[n,]<- probs[n-1,]%*%MatTM 
 
#plotting probabilities vs. step by state 
matplot(probs, type="l",  lty=1, lwd=2, col=1:5, ylim=c(-0.1, 1.1),  
xlab="Step", ylab="Probability", panel.first=grid()) 
 
legend("right", c("State 1", "State 2", "State 3", "State 4", "State 5"), lty=1, 
lwd=2, col=1:5) 

#specifying total number of steps 
nsteps<- 10
 
#specifying matrix containing probabilities 
probs<- matrix(NA, nrow=nsteps, ncol=5) 
  
#computing probabilities  
probs[1,] <- p0 
for(n in 2:nsteps)  
  probs[n,]<- probs[n-1,]%*%MatTM 
 
#plotting probabilities vs. step by state 
matplot(probs, type="l",  lty=1, lwd=2, col=1:5, ylim=c(-0.1, 1.1),  
xlab="Step", ylab="Probability", panel.first=grid()) 
 
legend("topleft", c("State 1", "State 2", "State 3", "State 4", "State 5"), lty=1, 
lwd=2, col=1:5) 
```
